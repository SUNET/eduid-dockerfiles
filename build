#!/bin/bash
#
# Build a LOCAL docker image.
# After this, your probably want to use ./tag and ./push.
#
set -e

. ./common.sh

if [ "x$1" = "x" ]; then
    echo "Syntax: $0 [-f] image ..."
    echo ""
    echo "  -f   force re-build by not using cache"
    echo ""
    exit 1
fi

build_opts=""
force=0
if [ "x$1" = "x-f" ]; then
    force=1
    build_opts+=" --no-cache=true"
    shift
fi

sudo=$(get_docker_sudo_command)

check_is_subdirs $*

git pull

for this in $*; do
    ver='latest'
    local_base=$(get_local_image_base)
    image=$(echo $this | sed -e 's!/*$!!')    # remove trailing slashes
    dir=$(echo ${image} | awk -F : '{print $1}')
    test -f ${dir}/metadata.sh && . ${dir}/metadata.sh

    if [ -d "${dir}/${ver}" ]; then
	dir="${dir}/${ver}"
	test -f ${dir}/metadata.sh && . ${dir}/metadata.sh
    fi

    echo ""
    echo "###############################################"
    echo "Building ${local_base}/${image}:${ver}"
    echo "###############################################"
    echo ""

    if [ $force -eq 1 ]; then
        ${sudo} docker rmi "${local_base}/${image}:${ver}" || true
    fi
    ${sudo} docker build $build_opts --force-rm=true -t="${local_base}/${image}:${ver}" "${dir}"
    echo ""
    echo "###############################################"
    echo "FINISHED building ${local_base}/${image}:${ver}"
    echo "###############################################"
    echo ""
done
